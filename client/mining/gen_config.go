// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package mining

import (
	"math/big"

	"github.com/kowala-tech/kcoin/client/common"
	"github.com/kowala-tech/kcoin/client/common/hexutil"
	"github.com/kowala-tech/kcoin/client/log"
)

var _ = (*configMarshaling)(nil)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Coinbase  common.Address `toml:",omitempty"`
		Deposit   *big.Int       `toml:",omitempty"`
		ExtraData hexutil.Bytes  `toml:",omitempty"`
		Logger    log.Logger     `toml:",omitempty"`
		GasPrice  *big.Int
	}
	var enc Config
	enc.Coinbase = c.Coinbase
	enc.Deposit = c.Deposit
	enc.ExtraData = c.ExtraData
	enc.Logger = c.Logger
	enc.GasPrice = c.GasPrice
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Coinbase  *common.Address `toml:",omitempty"`
		Deposit   *big.Int        `toml:",omitempty"`
		ExtraData *hexutil.Bytes  `toml:",omitempty"`
		Logger    log.Logger      `toml:",omitempty"`
		GasPrice  *big.Int
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Coinbase != nil {
		c.Coinbase = *dec.Coinbase
	}
	if dec.Deposit != nil {
		c.Deposit = dec.Deposit
	}
	if dec.ExtraData != nil {
		c.ExtraData = *dec.ExtraData
	}
	if dec.Logger != nil {
		c.Logger = dec.Logger
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.GasPrice
	}
	return nil
}
